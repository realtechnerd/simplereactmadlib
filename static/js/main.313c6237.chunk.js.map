{"version":3,"sources":["components/Header.jsx","components/MadLib.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","MadLib","state","adjective1","color1","noun1","verb1","adjective2","noun2","handleChange","bind","event","target","name","value","this","setState","placeholder","placeholder1","placeholder2","placeholder3","placeholder4","placeholder5","htmlFor","type","id","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAYeA,MATf,WACI,OACI,yBAAKC,UAAU,UACX,gDACA,iD,0CCmGGC,E,kDAtGX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,WAAY,GACZC,OAAQ,GACRC,MAAO,GACPC,MAAO,GACPC,WAAY,GACZC,MAAO,IAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAVV,E,yDAYDC,GAAQ,IAAD,EACMA,EAAMC,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MAEbC,KAAKC,SAAL,eACKH,EAAOC,M,+BAIZ,IAAMG,EAAwC,KAA1BF,KAAKb,MAAMC,WAAoB,gBAAkBY,KAAKb,MAAMC,WAC1Ee,EAAqC,KAAtBH,KAAKb,MAAME,OAAgB,YAAcW,KAAKb,MAAME,OACnEe,EAAoC,KAArBJ,KAAKb,MAAMG,MAAe,WAAaU,KAAKb,MAAMG,MACjEe,EAAoC,KAArBL,KAAKb,MAAMI,MAAe,WAAaS,KAAKb,MAAMI,MACjEe,EAAyC,KAA1BN,KAAKb,MAAMK,WAAoB,gBAAkBQ,KAAKb,MAAMK,WAC3Ee,EAAoC,KAArBP,KAAKb,MAAMM,MAAe,WAAaO,KAAKb,MAAMM,MACvE,OACI,yBAAKR,UAAU,UACX,2BAAOuB,QAAQ,cAAf,iBACA,2BACIN,YAAY,cACZO,KAAK,OACLC,GAAG,aACHZ,KAAK,aACLC,MAAOC,KAAKb,MAAMC,WAClBuB,SAAUX,KAAKN,eAEnB,6BACA,6BACA,2BAAOc,QAAQ,UAAf,aACA,2BACIN,YAAY,UACZO,KAAK,OACLC,GAAG,SACHZ,KAAK,SACLC,MAAOC,KAAKb,MAAME,OAClBsB,SAAUX,KAAKN,eAEnB,6BACA,6BACA,2BAAOc,QAAQ,SAAf,YACA,2BACIN,YAAY,SACZO,KAAK,OACLC,GAAG,QACHZ,KAAK,QACLC,MAAOC,KAAKb,MAAMG,MAClBqB,SAAUX,KAAKN,eAEnB,6BACA,6BACA,2BAAOc,QAAQ,SAAf,YACA,2BACIN,YAAY,SACZO,KAAK,OACLC,GAAG,QACHZ,KAAK,QACLC,MAAOC,KAAKb,MAAMI,MAClBoB,SAAUX,KAAKN,eAEnB,6BACA,6BACA,2BAAOc,QAAQ,cAAf,iBACA,2BACIN,YAAY,cACZO,KAAK,OACLC,GAAG,aACHZ,KAAK,aACLC,MAAOC,KAAKb,MAAMK,WAClBmB,SAAUX,KAAKN,eAEnB,6BACA,6BACA,2BAAOc,QAAQ,SAAf,YACA,2BACIN,YAAY,SACZO,KAAK,OACLC,GAAG,QACHZ,KAAK,QACLC,MAAOC,KAAKb,MAAMM,MAClBkB,SAAUX,KAAKN,eAGvB,yBAAKT,UAAU,cACX,6BACR,mCAASiB,EAAT,IAAuBC,EAAvB,IAAsCC,EAAtC,IAAqDC,EAArD,aAA6EC,EAA7E,IAA4FC,EAA5F,W,GAhGaK,IAAMC,WCWZC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.313c6237.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return(\r\n        <div className=\"header\">\r\n            <h1>A Simple Mad Lib</h1>\r\n            <p>Made in React.js</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nclass MadLib extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            adjective1: \"\",\r\n            color1: \"\",\r\n            noun1: \"\",\r\n            verb1: \"\",\r\n            adjective2: \"\",\r\n            noun2: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event) {\r\n        const {name, value} = event.target;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    render() {\r\n        const placeholder = this.state.adjective1 === \"\" ? \"[Adjective 1]\" : this.state.adjective1;\r\n        const placeholder1 = this.state.color1 === \"\" ? \"[Color 1]\" : this.state.color1;\r\n        const placeholder2 = this.state.noun1 === \"\" ? \"[Noun 1]\" : this.state.noun1;\r\n        const placeholder3 = this.state.verb1 === \"\" ? \"[Verb 1]\" : this.state.verb1;\r\n        const placeholder4 = this.state.adjective2 === \"\" ? \"[Adjective 2]\" : this.state.adjective2;\r\n        const placeholder5 = this.state.noun2 === \"\" ? \"[Noun 2]\" : this.state.noun2;\r\n        return(\r\n            <div className=\"MadLib\">\r\n                <label htmlFor=\"adjective1\">Adjective 1: </label>\r\n                <input\r\n                    placeholder=\"Adjective 1\" \r\n                    type=\"text\"\r\n                    id=\"adjective1\"\r\n                    name='adjective1'\r\n                    value={this.state.adjective1}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <br/>\r\n                <br/>\r\n                <label htmlFor=\"color1\">Color 1: </label>\r\n                <input\r\n                    placeholder=\"Color 1\" \r\n                    type=\"text\"\r\n                    id=\"color1\"\r\n                    name='color1'\r\n                    value={this.state.color1}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <br/>\r\n                <br/>\r\n                <label htmlFor=\"noun1\">Noun 1: </label>\r\n                <input\r\n                    placeholder=\"Noun 1\" \r\n                    type=\"text\"\r\n                    id=\"noun1\"\r\n                    name='noun1'\r\n                    value={this.state.noun1}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <br/>\r\n                <br/>\r\n                <label htmlFor=\"verb1\">Verb 1: </label>\r\n                <input\r\n                    placeholder=\"Verb 1\" \r\n                    type=\"text\"\r\n                    id=\"verb1\"\r\n                    name='verb1'\r\n                    value={this.state.verb1}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <br/>\r\n                <br/>\r\n                <label htmlFor=\"adjective2\">Adjective 2: </label>\r\n                <input\r\n                    placeholder=\"Adjective 2\" \r\n                    type=\"text\"\r\n                    id=\"adjective2\"\r\n                    name='adjective2'\r\n                    value={this.state.adjective2}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <br/>\r\n                <br/>\r\n                <label htmlFor=\"noun2\">Noun 2: </label>\r\n                <input\r\n                    placeholder=\"Noun 2\" \r\n                    type=\"text\"\r\n                    id=\"noun2\"\r\n                    name='noun2'\r\n                    value={this.state.noun2}\r\n                    onChange={this.handleChange}\r\n                />\r\n\r\n            <div className='MadLibText'>\r\n                <br/>\r\n        <h2>The {placeholder} {placeholder1} {placeholder2} {placeholder3} over the {placeholder4} {placeholder5}.</h2>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MadLib;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header.jsx\";\nimport MadLib from \"./components/MadLib.jsx\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MadLib />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}